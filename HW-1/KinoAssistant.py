import asyncio
import aiogram
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram import F
from aiogram.filters import command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup,ReplyKeyboardMarkup, KeyboardButton
import os
import dotenv
from films import *

dotenv.load_dotenv()

search_year = None
search_genre = None
lst_film = []
my_films = []
current_film = None


bot = aiogram.Bot(token=os.getenv("BOT_TOKEN"))
dp = aiogram.Dispatcher()

@dp.message(command.CommandStart())
async def start(message:types.Message):
    inline_start_btn_1 = InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='start_search')
    inline_start_btn_2 = InlineKeyboardButton(text='–ù–µ —Å–µ–π—á–∞—Å', callback_data='end_wish')
    inline_kb1 = InlineKeyboardMarkup(inline_keyboard=[[inline_start_btn_1, inline_start_btn_2]])

    await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –ø–æ–º–æ—â–∏ –≤ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å–º–æ–≤!   \n"
                         "–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–≤–æ–¥–∞: \n"
                        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ <<–ò–∑–±—Ä–∞–Ω–Ω–æ–µ>>\n"
                         "/mylist - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n"
                         "–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", reply_markup=inline_kb1)


@dp.callback_query(F.data=="end_wish")
async def end(callback: CallbackQuery):

    await callback.message.answer("–†–∞–±–æ—Ç–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞   \n"
                         "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start")

@dp.message(command.Command("clear"))
async def clear_my_list(message: types.Message):
    global my_films
    my_films = []

    await message.answer("–°–ø–∏—Å–æ–∫ <<–ò–∑–±—Ä–∞–Ω–Ω–æ–µ>> –æ—á–∏—â–µ–Ω")

@dp.callback_query(F.data=="start_search")
async def start_research(callback: CallbackQuery):
    global lst_film
    lst_film = []
    reply_kb1 = ReplyKeyboardBuilder()
    for genre in genres:
        reply_kb1.add(types.KeyboardButton(text=genre))
    reply_kb1.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä", reply_markup=reply_kb1.as_markup(resize_keyboard=True))

@dp.message(lambda message: message.text in genres)

async def chose_year(message:types.Message):
    global search_genre
    search_genre = message.text
    reply_kb2 = ReplyKeyboardBuilder()
    for i in range(2020,2025):
        reply_kb2.add(types.KeyboardButton(text=str(i)))
    reply_kb2.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞", reply_markup=reply_kb2.as_markup(resize_keyboard=True, one_time_keyboard=True))


def search_films(genre, year):
    for key in movies:
        movie = movies[key]
        if movie['genre'] == genre and movie['year'] == int(year):
            lst_film.append(movie['title'])
    print(lst_film)
    return lst_film


def films_generator():
    i = 0
    while i < len(lst_film):
        yield lst_film[i]
        i+=1

async def show_films():
    try:
        film = next(gen_films)
        return film
    except StopIteration:
        return None


@dp.message(lambda message: message.text.isdigit() and int(message.text) in range(2020,2025))
async def show_results(message:types.Message):
    global search_year, gen_films, current_film
    search_year = message.text
    films_lst = search_films(search_genre, search_year)

    if len(films_lst)==0:
        kb_builder = InlineKeyboardBuilder()
        inline_new_search_btn = InlineKeyboardButton(text='–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data="start_search")
        inline_end_btn = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data="end_wish")
        kb_builder.add(inline_new_search_btn, inline_end_btn)
        await message.answer("—Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb_builder.as_markup())
    else:
        gen_films = films_generator()
        current_film = await show_films()
        if current_film:
            kb_builder = InlineKeyboardBuilder()
            inline_save_btn = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data="save")
            inline_next_btn = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π', callback_data="next")
            kb_builder.add(inline_save_btn, inline_next_btn)

            await message.answer("–°–æ–≤–µ—Ç—É—é –≤–∞–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: \n"
                                 f"{current_film}", reply_markup=kb_builder.as_markup())

@dp.callback_query(F.data=="next")
async def start_research(callback: CallbackQuery):
    global current_film
    current_film = await show_films()
    if current_film:
        kb_builder = InlineKeyboardBuilder()
        inline_save_btn = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data="save")
        inline_next_btn = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π', callback_data="next")
        kb_builder.add(inline_save_btn, inline_next_btn)

        await callback.message.answer("–°–æ–≤–µ—Ç—É—é –≤–∞–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: \n"
                             f"{current_film}", reply_markup=kb_builder.as_markup())
    else:

        await finish_search(callback)

@dp.callback_query(F.data=="save")
async def add_my_list(callback: CallbackQuery):
    if current_film not in my_films:
        my_films.append(current_film)
    print(my_films)
    await callback.answer(f"–§–∏–ª—å–º <{current_film}> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)


@dp.callback_query(F.data=="end")
async def finish_search(callback: CallbackQuery):
    kb_builder = InlineKeyboardBuilder()
    inline_save_btn = InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ üé¨', callback_data="saved_films")
    inline_next_btn = InlineKeyboardButton(text='–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data="start_search")
    kb_builder.add(inline_save_btn, inline_next_btn)

    await callback.message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!!(((", reply_markup=kb_builder.as_markup())


@dp.callback_query(F.data=="saved_films")
async def show_saved_films(callback: CallbackQuery):

    kb_builder = InlineKeyboardBuilder()
    inline_new_search_btn = InlineKeyboardButton(text='–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data="start_search")
    inline_end_btn = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data="end_wish")
    kb_builder.add(inline_new_search_btn, inline_end_btn)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ñ–∏–ª—å–º—ã: \n {show_my_films()}", reply_markup=kb_builder.as_markup())

@dp.message(command.Command("mylist"))
async def show_saved_films_my(message:types.Message):

    kb_builder = InlineKeyboardBuilder()
    inline_new_search_btn = InlineKeyboardButton(text='–ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data="start_search")
    inline_end_btn = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data="end_wish")
    kb_builder.add(inline_new_search_btn, inline_end_btn)
    await message.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ñ–∏–ª—å–º—ã: \n {show_my_films()}", reply_markup=kb_builder.as_markup())

def show_my_films():
    global my_films
    str_film = ""
    for mov in my_films:
        str_film += mov + "\n"
    return str_film


async def main():
    await dp.start_polling(bot)

asyncio.run(main())